<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="26" passed="19" failed="6" skipped="1">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-09-30T14:34:36 IST" name="Default suite" finished-at="2023-09-30T14:34:45 IST" duration-ms="9674">
    <groups>
      <group name="regression">
        <method signature="DemoTest.demo2()[pri:0, instance:test.DemoTest@710f4dc7]" name="demo2" class="test.DemoTest"/>
        <method signature="DemoTest.demo3()[pri:0, instance:test.DemoTest@710f4dc7]" name="demo3" class="test.DemoTest"/>
        <method signature="ExampleTest.example1()[pri:0, instance:test.ExampleTest@3bf7ca37]" name="example1" class="test.ExampleTest"/>
        <method signature="ExampleTest.example3()[pri:0, instance:test.ExampleTest@3bf7ca37]" name="example3" class="test.ExampleTest"/>
        <method signature="SampleTest.sample1()[pri:0, instance:test.SampleTest@40005471]" name="sample1" class="test.SampleTest"/>
        <method signature="SampleTest.sample2()[pri:0, instance:test.SampleTest@40005471]" name="sample2" class="test.SampleTest"/>
      </group> <!-- regression -->
      <group name="smoke">
        <method signature="DemoTest.demo1()[pri:0, instance:test.DemoTest@710f4dc7]" name="demo1" class="test.DemoTest"/>
        <method signature="DemoTest.demo3()[pri:0, instance:test.DemoTest@710f4dc7]" name="demo3" class="test.DemoTest"/>
        <method signature="ExampleTest.example1()[pri:0, instance:test.ExampleTest@3bf7ca37]" name="example1" class="test.ExampleTest"/>
        <method signature="ExampleTest.example2()[pri:0, instance:test.ExampleTest@3bf7ca37]" name="example2" class="test.ExampleTest"/>
        <method signature="SampleTest.sample2()[pri:0, instance:test.SampleTest@40005471]" name="sample2" class="test.SampleTest"/>
        <method signature="SampleTest.sample3()[pri:0, instance:test.SampleTest@40005471]" name="sample3" class="test.SampleTest"/>
      </group> <!-- smoke -->
    </groups>
    <test started-at="2023-09-30T14:34:36 IST" name="Default test" finished-at="2023-09-30T14:34:45 IST" duration-ms="9674">
      <class name="test.SampleTest">
        <test-method is-config="true" signature="configureBeforeClass()[pri:0, instance:test.SampleTest@40005471]" started-at="2023-09-30T14:34:40 IST" name="configureBeforeClass" finished-at="2023-09-30T14:34:42 IST" duration-ms="1608" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configureBeforeClass -->
        <test-method signature="sample1()[pri:0, instance:test.SampleTest@40005471]" started-at="2023-09-30T14:34:42 IST" name="sample1" finished-at="2023-09-30T14:34:42 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sample1 -->
        <test-method signature="sample2()[pri:0, instance:test.SampleTest@40005471]" started-at="2023-09-30T14:34:42 IST" name="sample2" finished-at="2023-09-30T14:34:42 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sample2 -->
        <test-method signature="sample3()[pri:0, instance:test.SampleTest@40005471]" started-at="2023-09-30T14:34:42 IST" name="sample3" finished-at="2023-09-30T14:34:42 IST" duration-ms="7" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.fail(Assert.java:116)
at test.SampleTest.sample3(SampleTest.java:18)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- sample3 -->
        <test-method is-config="true" signature="configureAfterClass()[pri:0, instance:test.SampleTest@40005471]" started-at="2023-09-30T14:34:42 IST" name="configureAfterClass" finished-at="2023-09-30T14:34:42 IST" duration-ms="178" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configureAfterClass -->
      </class> <!-- test.SampleTest -->
      <class name="test.ExampleTest">
        <test-method is-config="true" signature="configureBeforeSuite()[pri:0, instance:test.ExampleTest@3bf7ca37]" started-at="2023-09-30T14:34:36 IST" name="configureBeforeSuite" finished-at="2023-09-30T14:34:36 IST" duration-ms="239" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configureBeforeSuite -->
        <test-method is-config="true" signature="configureBeforeClass()[pri:0, instance:test.ExampleTest@3bf7ca37]" started-at="2023-09-30T14:34:36 IST" name="configureBeforeClass" finished-at="2023-09-30T14:34:40 IST" duration-ms="4071" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configureBeforeClass -->
        <test-method signature="example1()[pri:0, instance:test.ExampleTest@3bf7ca37]" started-at="2023-09-30T14:34:40 IST" name="example1" finished-at="2023-09-30T14:34:40 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- example1 -->
        <test-method signature="example3()[pri:0, instance:test.ExampleTest@3bf7ca37]" started-at="2023-09-30T14:34:40 IST" name="example3" finished-at="2023-09-30T14:34:40 IST" depends-on-methods="test.ExampleTest.example2" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- example3 -->
        <test-method is-config="true" signature="configureAfterClass()[pri:0, instance:test.ExampleTest@3bf7ca37]" started-at="2023-09-30T14:34:40 IST" name="configureAfterClass" finished-at="2023-09-30T14:34:40 IST" duration-ms="193" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configureAfterClass -->
        <test-method is-config="true" signature="configureAfterSuite()[pri:0, instance:test.ExampleTest@3bf7ca37]" started-at="2023-09-30T14:34:46 IST" name="configureAfterSuite" finished-at="2023-09-30T14:34:46 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configureAfterSuite -->
      </class> <!-- test.ExampleTest -->
      <class name="test.HardAssertionTest">
        <test-method is-config="true" signature="configureBeforeClass()[pri:0, instance:test.HardAssertionTest@2cd76f31]" started-at="2023-09-30T14:34:42 IST" name="configureBeforeClass" finished-at="2023-09-30T14:34:44 IST" duration-ms="1618" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configureBeforeClass -->
        <test-method signature="hardAssert1()[pri:0, instance:test.HardAssertionTest@2cd76f31]" started-at="2023-09-30T14:34:44 IST" name="hardAssert1" finished-at="2023-09-30T14:34:44 IST" duration-ms="9" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [I] but found [S]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [I] but found [S]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertEqualsImpl(Assert.java:150)
at org.testng.Assert.assertEquals(Assert.java:132)
at org.testng.Assert.assertEquals(Assert.java:656)
at org.testng.Assert.assertEquals(Assert.java:666)
at test.HardAssertionTest.hardAssert1(HardAssertionTest.java:22)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hardAssert1 -->
        <test-method signature="hardAssert2()[pri:0, instance:test.HardAssertionTest@2cd76f31]" started-at="2023-09-30T14:34:44 IST" name="hardAssert2" finished-at="2023-09-30T14:34:44 IST" duration-ms="1" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.fail(Assert.java:116)
at test.HardAssertionTest.hardAssert2(HardAssertionTest.java:30)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hardAssert2 -->
        <test-method signature="hardAssert3()[pri:0, instance:test.HardAssertionTest@2cd76f31]" started-at="2023-09-30T14:34:44 IST" name="hardAssert3" finished-at="2023-09-30T14:34:44 IST" duration-ms="2" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertFalse(Assert.java:79)
at org.testng.Assert.assertFalse(Assert.java:89)
at test.HardAssertionTest.hardAssert3(HardAssertionTest.java:37)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hardAssert3 -->
        <test-method signature="hardAssert4()[pri:0, instance:test.HardAssertionTest@2cd76f31]" started-at="2023-09-30T14:34:44 IST" name="hardAssert4" finished-at="2023-09-30T14:34:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hardAssert4 -->
        <test-method signature="hardAssert5()[pri:0, instance:test.HardAssertionTest@2cd76f31]" started-at="2023-09-30T14:34:44 IST" name="hardAssert5" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Hard assert failings]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Hard assert failings
at org.testng.Assert.fail(Assert.java:111)
at test.HardAssertionTest.hardAssert5(HardAssertionTest.java:51)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hardAssert5 -->
        <test-method signature="hardAssert6()[pri:0, instance:test.HardAssertionTest@2cd76f31]" started-at="2023-09-30T14:34:44 IST" name="hardAssert6" finished-at="2023-09-30T14:34:44 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- hardAssert6 -->
        <test-method is-config="true" signature="configureAfterClass()[pri:0, instance:test.HardAssertionTest@2cd76f31]" started-at="2023-09-30T14:34:44 IST" name="configureAfterClass" finished-at="2023-09-30T14:34:44 IST" duration-ms="139" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configureAfterClass -->
      </class> <!-- test.HardAssertionTest -->
      <class name="test.AnnotationsTest">
        <test-method is-config="true" signature="connectDB()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:36 IST" name="connectDB" finished-at="2023-09-30T14:34:36 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- connectDB -->
        <test-method is-config="true" signature="openBrowser()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="openBrowser" finished-at="2023-09-30T14:34:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openBrowser -->
        <test-method is-config="true" signature="login()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="login" finished-at="2023-09-30T14:34:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method signature="executeScript4()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="executeScript4" finished-at="2023-09-30T14:34:44 IST" depends-on-methods="test.AnnotationsTest.executeScript5" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeScript4 -->
        <test-method is-config="true" signature="logout()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="logout" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="executeScript6()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="executeScript6" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeScript6 -->
        <test-method is-config="true" signature="login()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="login" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method is-config="true" signature="logout()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="logout" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="executeScript6()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="executeScript6" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeScript6 -->
        <test-method is-config="true" signature="login()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="login" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method is-config="true" signature="login()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="login" finished-at="2023-09-30T14:34:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method is-config="true" signature="logout()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="logout" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method signature="executeScript1()[pri:1, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="executeScript1" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeScript1 -->
        <test-method is-config="true" signature="logout()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="logout" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="login()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="login" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method signature="executeScript3()[pri:2, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="executeScript3" finished-at="2023-09-30T14:34:44 IST" depends-on-methods="test.AnnotationsTest.executeScript6" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeScript3 -->
        <test-method is-config="true" signature="logout()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="logout" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="login()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="login" finished-at="2023-09-30T14:34:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- login -->
        <test-method signature="executeScript2()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="executeScript2" finished-at="2023-09-30T14:34:44 IST" depends-on-methods="test.AnnotationsTest.executeScript3" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeScript2 -->
        <test-method is-config="true" signature="closeBrowser()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="closeBrowser" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeBrowser -->
        <test-method is-config="true" signature="logout()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:44 IST" name="logout" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logout -->
        <test-method is-config="true" signature="closeDB()[pri:0, instance:test.AnnotationsTest@2aceadd4]" started-at="2023-09-30T14:34:46 IST" name="closeDB" finished-at="2023-09-30T14:34:46 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeDB -->
      </class> <!-- test.AnnotationsTest -->
      <class name="test.ExecutionOrderTest">
        <test-method is-config="true" signature="beforeSuite1()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:36 IST" name="beforeSuite1" finished-at="2023-09-30T14:34:36 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeSuite1 -->
        <test-method is-config="true" signature="beforeTest1()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:36 IST" name="beforeTest1" finished-at="2023-09-30T14:34:36 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeTest1 -->
        <test-method is-config="true" signature="beforeMethod1()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="beforeMethod1" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod1 -->
        <test-method is-config="true" signature="beforeClass1()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="beforeClass1" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass1 -->
        <test-method is-config="true" signature="beforeMethod2()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="beforeMethod2" finished-at="2023-09-30T14:34:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod2 -->
        <test-method signature="test1()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="test1" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test1 -->
        <test-method is-config="true" signature="beforeMethod3()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="beforeMethod3" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod3 -->
        <test-method is-config="true" signature="afterMethod1()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="afterMethod1" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod1 -->
        <test-method is-config="true" signature="afterMethod2()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="afterMethod2" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod2 -->
        <test-method is-config="true" signature="beforeMethod2()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="beforeMethod2" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod2 -->
        <test-method is-config="true" signature="beforeMethod1()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="beforeMethod1" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod1 -->
        <test-method is-config="true" signature="beforeMethod3()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="beforeMethod3" finished-at="2023-09-30T14:34:44 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod3 -->
        <test-method signature="test2()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="test2" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test2 -->
        <test-method is-config="true" signature="afterMethod1()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="afterMethod1" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod1 -->
        <test-method is-config="true" signature="afterMethod2()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="afterMethod2" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod2 -->
        <test-method is-config="true" signature="afterClass1()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:44 IST" name="afterClass1" finished-at="2023-09-30T14:34:44 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterClass1 -->
        <test-method is-config="true" signature="afterTest1()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:45 IST" name="afterTest1" finished-at="2023-09-30T14:34:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterTest1 -->
        <test-method is-config="true" signature="afterSuite1()[pri:0, instance:test.ExecutionOrderTest@24aed80c]" started-at="2023-09-30T14:34:46 IST" name="afterSuite1" finished-at="2023-09-30T14:34:46 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterSuite1 -->
      </class> <!-- test.ExecutionOrderTest -->
      <class name="test.TestNG_PracticeTest">
        <test-method signature="logoutAsAdmin()[pri:0, instance:test.TestNG_PracticeTest@1ff4931d]" started-at="2023-09-30T14:34:45 IST" name="logoutAsAdmin" finished-at="2023-09-30T14:34:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- logoutAsAdmin -->
        <test-method signature="openBrowser()[pri:0, instance:test.TestNG_PracticeTest@1ff4931d]" started-at="2023-09-30T14:34:45 IST" name="openBrowser" finished-at="2023-09-30T14:34:45 IST" duration-ms="1" status="FAIL">
          <exception class="java.lang.ArithmeticException">
            <message>
              <![CDATA[/ by zero]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.ArithmeticException: / by zero
at test.TestNG_PracticeTest.openBrowser(TestNG_PracticeTest.java:10)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.ArithmeticException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- openBrowser -->
        <test-method signature="closeBrowser()[pri:0, instance:test.TestNG_PracticeTest@1ff4931d]" started-at="2023-09-30T14:34:45 IST" name="closeBrowser" finished-at="2023-09-30T14:34:45 IST" depends-on-methods="test.TestNG_PracticeTest.openBrowser" duration-ms="0" status="SKIP">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method test.TestNG_PracticeTest.closeBrowser() on instance test.TestNG_PracticeTest@1ff4931d depends on not successfully finished methods 
[test.TestNG_PracticeTest.openBrowser() on instance test.TestNG_PracticeTest@1ff4931d]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method test.TestNG_PracticeTest.closeBrowser() on instance test.TestNG_PracticeTest@1ff4931d depends on not successfully finished methods 
[test.TestNG_PracticeTest.openBrowser() on instance test.TestNG_PracticeTest@1ff4931d]
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:156)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- closeBrowser -->
        <test-method signature="executeTask()[pri:1, instance:test.TestNG_PracticeTest@1ff4931d]" started-at="2023-09-30T14:34:45 IST" name="executeTask" finished-at="2023-09-30T14:34:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- executeTask -->
      </class> <!-- test.TestNG_PracticeTest -->
      <class name="test.DemoTest">
        <test-method is-config="true" signature="configureBeforeClass()[pri:0, instance:test.DemoTest@710f4dc7]" started-at="2023-09-30T14:34:44 IST" name="configureBeforeClass" finished-at="2023-09-30T14:34:45 IST" duration-ms="1531" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configureBeforeClass -->
        <test-method signature="demo1()[pri:0, instance:test.DemoTest@710f4dc7]" started-at="2023-09-30T14:34:45 IST" name="demo1" finished-at="2023-09-30T14:34:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demo1 -->
        <test-method signature="demo2()[pri:0, instance:test.DemoTest@710f4dc7]" started-at="2023-09-30T14:34:45 IST" name="demo2" finished-at="2023-09-30T14:34:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demo2 -->
        <test-method signature="demo3()[pri:0, instance:test.DemoTest@710f4dc7]" started-at="2023-09-30T14:34:45 IST" name="demo3" finished-at="2023-09-30T14:34:45 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- demo3 -->
        <test-method is-config="true" signature="configureAfterClass()[pri:0, instance:test.DemoTest@710f4dc7]" started-at="2023-09-30T14:34:45 IST" name="configureAfterClass" finished-at="2023-09-30T14:34:45 IST" duration-ms="176" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- configureAfterClass -->
      </class> <!-- test.DemoTest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
